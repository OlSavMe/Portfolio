// @import "~bootstrap/scss/bootstrap";

@mixin scrollbars {
  // Chrome, Edge, Opera, Safari, iOS
  ::-webkit-scrollbar {
    width: 0px;
    background: transparent;
  }
}

@mixin user-select-disabled {
  user-select: none;
  /* Mozilla*/
  -moz-user-select: none; /* Mozilla */
  -webkit-user-select: none; /* WebKit */
  -ms-user-select: none; /* Microsoft */
}

@mixin card-border {
  border: solid rgba(0, 0, 0, 0.5) 1px;
  box-shadow: $yellow 4px 4px;
}

@mixin basic-button-style {
  display: inline-block;
  border: none;
  margin: 0;
  text-decoration: none;
  font-family: "Source Sans Pro", sans-serif;
  cursor: pointer;
  transition: background 250ms ease-in-out, transform 150ms ease;
  -webkit-appearance: none;
  -moz-appearance: none;
}

@mixin main-container {
  display: flex;
  flex-direction: column;
  color: #666666;
  padding: 0.5rem;
}

// responsiveness
@mixin phone {
  @media only screen and (max-width: 768px) {
    @content;
  }
}

@mixin no-mobile {
  @media only screen and (min-width: 769px) {
    @content;
  }
}

@mixin tablet {
  @media only screen and (min-width: 769px) and (max-width: 1023px) {
    @content;
  }
}

@mixin mobile {
  @media only screen and (max-width: 480px) {
    @content;
  }
}

@mixin ipad {
  @media only screen and (min-width: 481px) and (max-width: 768px) {
    @content;
  }
}

@mixin tablet-landscape {
  @media only screen and (min-width: 1024px) and (max-width: 1199px) {
    @content;
  }
}

@mixin desktop {
  @media only screen and (min-width: 1200px) and (max-width: 1799px) {
    @content;
  }
}

@mixin landscape {
  @media only screen and (max-height: 650px) {
    @content;
  }
}

@mixin big-desktop {
  @media only screen and (min-width: 1800px) {
    @content;
  }
}

//  responsiveness breakpoint values
$breakpoints: (
  mobile: 480px,
  ipad: 769px,
  tablet: 1024px,
  tablet-landscape: 1200px,
  desktop: 1800px,
);

//  mixin to print out media queries
@mixin media($keys...) {
  @each $key in $keys {
    @media (max-width: map-get($breakpoints, $key)) {
      @content;
    }
  }
}

@mixin min-media($keys...) {
  @each $key in $keys {
    @media (min-width: map-get($breakpoints, $key)) {
      @content;
    }
  }
}

@keyframes mymove {
  from {
    transform: translateY(0);
    opacity: 0;
  }
  to {
    transform: translateY(200px);
    opacity: 1;
  }
}

@keyframes animate-arrow {
  0% {
    border-color: #f9a602;
    transform: translate(0, 0);
  }
  50% {
    border-color: #f9a602;
    transform: translate(5px, 5px);
  }

  50% {
    border-color: #f3d18b;
    transform: translate(5px, 5px);
  }
  100% {
    border-color: white;
    transform: translate(0, 0);
  }
}

// palette
$yellow: #f9a602;
$yellowrgb: rgb(249, 166, 2);
$textColor: #666;
